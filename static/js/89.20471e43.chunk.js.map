{"version":3,"file":"static/js/89.20471e43.chunk.js","mappings":"oLACA,EAAgC,+BAAhC,EAAwE,wB,mBCoBxE,EAhBiB,kBACf,gBAAKA,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTT,UAAWC,KAXA,C,kECHXS,EAAU,mCAAG,WAAMC,GAAN,gGAEQC,EAAAA,EAAAA,IAAUD,GAFlB,cAETE,EAFS,yBAGRA,GAHQ,wFAAH,sDAUhB,K,oECXA,OAAgB,SAAW,uBAAuB,aAAe,2BAA2B,iBAAmB,+BAA+B,gBAAkB,+B,+ECgDhK,EA5CmB,WACjB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAIFE,GAAaC,EAAAA,EAAAA,cAAW,iBAAC,6FACvBb,EAAM,GAAGc,OACbC,EAAAA,GACA,SACAL,EACA,oBACAK,EAAAA,GACA,mBAP2B,mBAWLhB,EAAAA,EAAAA,GAAWC,GAXN,UAWrBI,EAXqB,6BAcnB,IAAIY,MAAM,+BAdS,OAiB3BX,EAAWD,EAAQa,KAAKC,MAjBG,kDAmB3BT,EAAS,KAAMU,SAnBY,yBAqB3BZ,GAAa,GArBc,6EAuB5B,CAACG,IAUJ,OARAU,EAAAA,EAAAA,YAAU,WAERX,EAAS,MACTF,GAAa,GAEbK,GACD,GAAE,CAACA,IAEG,CAAER,QAAAA,EAASE,UAAAA,EAAWE,MAAAA,EAC9B,E,6BCAD,EAvCa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,EAAsCW,EAAWX,GAAzCJ,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,MAAOJ,EAA1B,EAA0BA,QACtBkB,EAAW,GA4Bf,OA1BId,GACFe,EAAAA,GAAAA,MAAYf,GAGVJ,IACFkB,EAAWlB,EAAQoB,KAAI,SAAAN,GACrB,OACE,gBAAkB7B,UAAWC,EAAAA,aAA7B,WACE,gBACEmC,IACEP,EAAKQ,aAAL,UACOX,EAAAA,IADP,OAC0BG,EAAKQ,cAC3B,wDAENC,IAAKT,EAAKU,KACVvC,UAAWC,EAAAA,mBAEb,iBAAKD,UAAWC,EAAAA,gBAAhB,WACE,iBAAMD,UAAWC,EAAAA,iBAAjB,SAAwC4B,EAAKU,QAC7C,kBAAMvC,UAAWC,EAAAA,iBAAjB,eAA0C4B,EAAKW,UAA/C,aAZKX,EAAKY,GAgBjB,MAID,iBAAKzC,UAAWC,EAAAA,SAAhB,UACGgB,IAAa,SAACyB,EAAA,EAAD,KACd,eAAI1C,UAAWC,EAAAA,SAAf,SAA8BgC,MAGnC,C","sources":["webpack://react-homework-template/./src/components/spinner/Spinner.module.css?a11c","components/spinner/Spinner.js","functions/api.js","webpack://react-homework-template/./src/pages/movieDetailsPage/cast/Cast.module.css?1e0d","hooks/fetchCredits.js","pages/movieDetailsPage/cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loaderWrapper\":\"Spinner_loaderWrapper__OsG+c\",\"loader\":\"Spinner_loader__yCPuB\"};","\nimport { BallTriangle } from 'react-loader-spinner';\nimport css from './Spinner.module.css';\nimport React from 'react';\n\n const Spinner = () => (\n  <div className={css.loaderWrapper}>\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"#3f51b5\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n      className={css.loader}\n    />\n  </div>\n);\n\nexport default Spinner;","import axios from 'axios';\n\nconst fetchMovie = async url => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {\n\n  }\n};\n\n\nexport default fetchMovie;\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__zp87B\",\"castListItem\":\"Cast_castListItem__kPqeB\",\"castListItemInfo\":\"Cast_castListItemInfo__tFDZP\",\"castListItemImg\":\"Cast_castListItemImg__pRqKC\"};","import fetchMovie from 'functions/api';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport base from '../data/api.json';\n\nconst useCredits = () => {\n  const [credits, setCredits] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { movieID } = useParams();\n\n  //https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n\n  const getCredits = useCallback(async () => {\n    const url = ''.concat(\n      base.baseUrl,\n      'movie/',\n      movieID,\n      '/credits?api_key=',\n      base.KEY,\n      '&language=en-US'\n    );\n\n    try {\n      const credits = await fetchMovie(url);\n\n      if (!credits) {\n        throw new Error('Sorry, something went wrong');\n      }\n\n      setCredits(credits.data.cast);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieID]);\n\n  useEffect(() => {\n    //reset initial values\n    setError(null);\n    setIsLoading(true);\n    //invoking fetch function for credits\n    getCredits();\n  }, [getCredits]);\n\n  return { credits, isLoading, error };\n};\n\nexport default useCredits;\n","import css from './Cast.module.css';\nimport useCredits from 'hooks/fetchCredits';\nimport { useParams } from 'react-router-dom';\nimport base from '../../../data/api.json';\nimport Spinner from 'components/spinner/Spinner';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types'\n\nconst Cast = () => {\n  const { movieID } = useParams();\n  const { isLoading, error, credits } = useCredits(movieID);\n  let castList = '';\n\n  if (error) {\n    toast.error(error);\n  }\n\n  if (credits) {\n    castList = credits.map(cast => {\n      return (\n        <li key={cast.id} className={css.castListItem}>\n          <img\n            src={\n              cast.profile_path\n                ? `${base.baseImgPath}${cast.profile_path}`\n                : 'https://via.placeholder.com/185x278.png?text=No+Image'\n            }\n            alt={cast.name}\n            className={css.castListItemImg}\n          />\n          <div className={css.castListItemIfo}>\n            <span className={css.castListItemInfo}>{cast.name}</span>\n            <span className={css.castListItemInfo}>( {cast.character} )</span>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <div className={css.castList}>\n      {isLoading && <Spinner />}\n      <ul className={css.castList}>{castList}</ul>\n    </div>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  credits: PropTypes.array,\n  id: PropTypes.string,\n  isLoading: PropTypes.bool,\n  error: PropTypes.string,\n  name: PropTypes.string,\n  charater: PropTypes.string,\n  castList: PropTypes.func,\n  movieID: PropTypes.string\n};\n"],"names":["className","css","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","fetchMovie","url","axios","response","useState","credits","setCredits","isLoading","setIsLoading","error","setError","movieID","useParams","getCredits","useCallback","concat","base","Error","data","cast","message","useEffect","useCredits","castList","toast","map","src","profile_path","alt","name","character","id","Spinner"],"sourceRoot":""}