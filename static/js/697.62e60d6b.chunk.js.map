{"version":3,"file":"static/js/697.62e60d6b.chunk.js","mappings":"qLACA,EAAgC,+BAAhC,EAAwE,wB,mBCoBxE,EAhBiB,kBACf,gBAAKA,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTT,UAAWC,KAXA,C,kECHXS,EAAU,mCAAG,WAAMC,GAAN,gGAEQC,EAAAA,EAAAA,IAAUD,GAFlB,cAETE,EAFS,yBAGRA,GAHQ,wFAAH,sDAUhB,K,6ICwBA,EAhCkB,SAAAF,GAChB,OAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAIMC,GAAcC,EAAAA,EAAAA,cAAW,iBAAC,8GAELZ,EAAAA,EAAAA,GAAWC,GAFN,UAEtBE,EAFsB,6BAIpB,IAAIU,MAAM,+BAJU,OAQ5BP,EAAUH,EAASW,KAAKC,SARI,gDAU5BL,EAAS,KAAMM,SAVa,yBAY5BR,GAAa,GAZe,4EAc7B,CAACP,IAQJ,OANAgB,EAAAA,EAAAA,YAAU,WACRT,GAAa,GACbE,EAAS,MACTC,GACD,GAAE,CAACA,IAEG,CAAEJ,UAAAA,EAAWE,MAAAA,EAAOJ,OAAAA,EAC5B,E,2DC1BKa,EAASC,CAAAA,SAAAA,aAAAA,WAAAA,2BAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,kBAErBC,EAAY,GAAGC,OACnBC,EAAAA,GACA,8BAFgB,UAGbL,IAqCL,EAlCa,WACX,IAAMM,GAAWC,EAAAA,EAAAA,MACjB,EAAqCC,EAAUL,GAAvChB,EAAR,EAAQA,OAAQI,EAAhB,EAAgBA,MAAOF,EAAvB,EAAuBA,UAMvB,OAJIE,GACFkB,EAAAA,GAAAA,MAAYlB,IAIZ,iBAAKnB,UAAS,UAAKC,EAAAA,EAAAA,UAAL,YAAsBA,EAAAA,EAAAA,MAApC,WACE,eAAID,UAAWC,EAAAA,EAAAA,WAAf,+CACCgB,IAAa,SAACqB,EAAA,EAAD,KACd,eAAItC,UAAWC,EAAAA,EAAAA,SAAf,SACGc,EAAOwB,KAAI,SAAAC,GAAE,OACZ,gBAEExC,UAAWC,EAAAA,EAAAA,aACXwC,MAAM,kCAHR,WAKE,SAAC,KAAD,CACEC,GAAE,kBAAaF,EAAGG,IAClBC,MAAO,CAAEC,KAAMX,GACflC,UAAWC,EAAAA,EAAAA,SAHb,SAKGuC,EAAGC,SAEN,iBAAMzC,UAAWC,EAAAA,EAAAA,mBAAjB,uBAXKuC,EAAGG,GAFE,QAmBrB,C,qBC/CD,KAAgB,UAAY,4BAA4B,KAAO,uBAAuB,WAAa,6BAA6B,SAAW,2BAA2B,aAAe,+BAA+B,mBAAqB,qCAAqC,SAAW,2B","sources":["webpack://react-homework-template/./src/components/spinner/Spinner.module.css?a11c","components/spinner/Spinner.js","functions/api.js","hooks/fetchTrends.js","pages/homePage/HomePage.jsx","webpack://react-homework-template/./src/pages/homePage/HomePage.module.css?0264"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loaderWrapper\":\"Spinner_loaderWrapper__OsG+c\",\"loader\":\"Spinner_loader__yCPuB\"};","\nimport { BallTriangle } from 'react-loader-spinner';\nimport css from './Spinner.module.css';\nimport React from 'react';\n\n const Spinner = () => (\n  <div className={css.loaderWrapper}>\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"#3f51b5\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n      className={css.loader}\n    />\n  </div>\n);\n\nexport default Spinner;","import axios from 'axios';\n\nconst fetchMovie = async url => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {\n\n  }\n};\n\n\nexport default fetchMovie;\n","import { useState, useEffect, useCallback } from 'react';\nimport fetchMovie from 'functions/api';\n\n\nconst useTrends = url => {\n  const [trends, setTrends] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  //useCallback is used here to optimize the performance of the component by memoizing the fetchTrends function\n  // and avoiding unnecessary re-renders.\n  const fetchTrends = useCallback(async () => {\n    try {\n      const response = await fetchMovie(url);\n      if (!response) {\n        throw new Error('Sorry, something went wrong');\n      }\n      // console.log('trends',response.data);\n\n      setTrends(response.data.results);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [url]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    fetchTrends();\n  }, [fetchTrends]);\n\n  return { isLoading, error, trends };\n};\n\nexport default useTrends;\n","import css from './HomePage.module.css';\nimport useTrends from 'hooks/fetchTrends';\nimport { Link, useLocation } from 'react-router-dom';\nimport base from '../../data/api.json';\nimport Spinner from 'components/spinner/Spinner';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types'\n\nconst apiKey = process.env.REACT_APP_API_KEY\n\nconst TREND_URL = ''.concat(\n  base.baseUrl,\n  'trending/movie/day?api_key=',\n  `${apiKey}`\n);\n\nconst Home = () => {\n  const location = useLocation();\n  const { trends, error, isLoading } = useTrends(TREND_URL);\n\n  if (error) {\n    toast.error(error);\n  }\n\n  return (\n    <div className={`${css.container} ${css.home}`}>\n      <h2 className={css.homeHeader}>The most popular movies for today</h2>\n      {isLoading && <Spinner />}\n      <ul className={css.homeList}>\n        {trends.map(el => (\n          <li\n            key={el.id}\n            className={css.homeListItem}\n            title=\"Click on me to see more details\"\n          >\n            <Link\n              to={`/movies/${el.id}`}\n              state={{ from: location }}\n              className={css.homeLink}\n            >\n              {el.title}\n            </Link>\n            <span className={css.homeListItemMarker}>â—„ </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n\nHome.propTypes = {\n  trends: PropTypes.array,\n  id: PropTypes.string,\n  isLoading: PropTypes.bool,\n  error: PropTypes.string,\n  title: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HomePage_container__CZjBo\",\"home\":\"HomePage_home__ZXHmc\",\"homeHeader\":\"HomePage_homeHeader__lmQJA\",\"homeList\":\"HomePage_homeList__toFsl\",\"homeListItem\":\"HomePage_homeListItem__Nm6B-\",\"homeListItemMarker\":\"HomePage_homeListItemMarker__aSz36\",\"homeLink\":\"HomePage_homeLink__g2TOm\"};"],"names":["className","css","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","fetchMovie","url","axios","response","useState","trends","setTrends","isLoading","setIsLoading","error","setError","fetchTrends","useCallback","Error","data","results","message","useEffect","apiKey","process","REACT_APP_API_KEY","TREND_URL","concat","base","location","useLocation","useTrends","toast","Spinner","map","el","title","to","id","state","from"],"sourceRoot":""}